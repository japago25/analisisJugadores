# -*- coding: utf-8 -*-
"""tallerGrupal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16IX597mbtAZG8E9tzh-2n27qQyIhyb-L

# Inicio archivos
"""

#Montar el drive, para no tener que cargar siempre el archivo al colab
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Se carga la data para poderla manipular
df = pd.read_csv('/content/drive/MyDrive/FullData.csv')
df

"""# 1. Operaciones Basicas"""

#a. Tamaño de la data
tamano = df.shape
print("La Data tiene {} filas y {} columnas".format(tamano[0], tamano[1]))

#b. Información de la data
df.info()

#c. Estadisticas de la data
estadisticas = df.describe()
estadisticas

#e. Eliminar columnas innecesarias
df.columns

df = df.drop(labels='GK_Positioning', axis=1)
df = df.drop(labels='GK_Diving', axis=1)
df = df.drop(labels='GK_Kicking', axis=1)
df = df.drop(labels='GK_Handling', axis=1)
df = df.drop(labels='GK_Reflexes', axis=1)

df.columns

#f. Filtrar datos
df_filtrado = df.loc[(df['Nationality'] == 'England') | (df['Nationality'] == 'Colombia')]

df_filtrado

"""# 2. Estadistica Descriptiva"""

#a. Visualización de datos (Ejemplo: Frecuencias, distribuciones)
fig, ax = plt.subplots(figsize=(40, 5))

frecuencias = df['Nationality'].value_counts()
frecuencias.plot(kind='bar', color = 'red')
plt.xticks(rotation=90)
plt.xlabel('Atributo')
plt.ylabel('Frecuencia')
plt.title('Diagrama de Frecuencia', fontweight = 'bold', fontsize=30, color = 'orange')

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.show()

for col in df.columns:
  fig, ax = plt.subplots(figsize=(40, 5))

  frecuencias = df[col].value_counts()
  frecuencias.plot(kind='bar', color = 'red')
  plt.xticks(rotation=90)
  plt.xlabel(col)
  plt.ylabel('Frecuencia')
  plt.title('Diagrama de Frecuencia para ' + col, fontweight = 'bold', fontsize=30, color = 'orange')

  #Cuadricula
  ax.grid(linestyle = '--', alpha = 0.3)

  #Quitar unas margenes
  ax.spines['top'].set_alpha(0.0)
  ax.spines['right'].set_alpha(0.0)

  plt.show()

#b. Gráficas sobre datos numéricos (Ejemplo: Histogramas)
fig, ax = plt.subplots(figsize=(30, 5))
    
#Cuantos datos sin repetirse existen en la columna
num_bins = df['Rating'].nunique()

#Cuadricula
ax.grid(linestyle = '--', alpha = 0.3)

#Quitar unas margenes
ax.spines['top'].set_alpha(0.0)
ax.spines['right'].set_alpha(0.0)

plt.hist(df['Rating'], bins=num_bins, color='b', rwidth=0.75)
plt.xlabel(col)
plt.ylabel('Frecuencia')
plt.title('Histograma de Rating', fontweight = 'bold', fontsize=30, color = 'orange')
plt.show()

for col in df.columns:
  if df[col].dtype == int:
    #Grafica fid = todo, axes = rectangulo
    fig, ax = plt.subplots(figsize=(30, 5))
    
    #Cuantos datos sin repetirse existen en la columna
    num_bins = df[col].nunique()

    #Cuadricula
    ax.grid(linestyle = '--', alpha = 0.3)

    #Quitar unas margenes
    ax.spines['top'].set_alpha(0.0)
    ax.spines['right'].set_alpha(0.0)

    plt.hist(df[col], bins=num_bins, color='b', rwidth=0.75)
    plt.xlabel(col)
    plt.ylabel('Frecuencia')
    plt.title('Histograma de ' + col, fontweight = 'bold', fontsize=30, color = 'orange')
    plt.show()

#c. Medidas de tendencia central (Ejemplo: Media, mediana, moda, máximo, mínimo)

for col in df.columns:
  if df[col].dtype == int:
    media = df[col].mean()
    mediana = df[col].median()
    moda = df[col].mode()
    maximo = df[col].max()
    minimo = df[col].min()
    
    print('\n\n--------------' + col + '---------------')
    print('Maximo : \t', maximo)
    print('Minimo : \t', minimo)
    print('Media : \t', media)
    print('Mediana : \t', mediana)
    print('Moda : \t', moda)

#d. Estimaciones de varianza (Ejemplo: Desviación estándar)

for col in df.columns:
  if df[col].dtype == int:
    ds = df[col].std()
    
    print('\n\n--------------' + col + '---------------')
    print('Desviacion : \t', ds)

"""#3. Identificación de datos ruidosos"""

#Se Muestran los datos disponibles
df.info()

#Se selecciona la columna o categoria que se quiere trabajar
seleccion = 'Age'

#Sacar las variables estadistias
print(df[seleccion].describe())

#Realizamos un histograma
fig, ax = plt.subplots(figsize=(40, 5))
plt.hist(df[seleccion], bins=15, rwidth=0.75)
plt.show()

#Realizamos un diagrama de caja y bigotes
fig, ax = plt.subplots(figsize=(20, 10))
plt.boxplot(df[seleccion])
plt.show()

#Establecemos un umbral de tamizaje
umbral = np.mean(df[seleccion]) + 3*np.std(df[seleccion])
atipicos = df.loc[df[seleccion] > umbral]

print(atipicos[['Name', seleccion]])

#Si uno quiere elimina estos datos
df = df.drop(atipicos.index)

#Realizamos un histograma
fig, ax = plt.subplots(figsize=(40, 5))
plt.hist(df[seleccion], bins=20, rwidth=0.75)
plt.show()

#Realizamos un diagrama de caja y bigotes
fig, ax = plt.subplots(figsize=(20, 10))
plt.boxplot(df[seleccion])
plt.show()

"""#4. Identificar datos perdidos"""

#a. Eliminar

#miramos el DataFrame original
df

#Eliminamos las columnas con datos perdidos en donde thresh=3 dice la cantidad minima de valores no perdidos para eliminar la columna
df = df.dropna(axis=1)
df

#Eliminamos las filas con datos perdidos
df = df.dropna()
df

#b. Reemplazar

#Remplazo por la media de cada columna
df = df.fillna(df.mean())

#Remplazo por una carita
df = df.fillna(";-)")

df

"""#5. Identificación de inconsistencias en la data"""

#a. Formato de campos
df.info()

from datetime import datetime

for cumple in df['Birth_Date']:
  fecha_str = cumple
  fecha = datetime.strptime(fecha_str, '%m/%d/%Y')
  fecha_numero = int(fecha.strftime('%Y%m%d'))
  print(fecha_numero)

"""#6. Reemplazar variables categóricas"""

#Se Muestran los datos disponibles
df.info()

#Se selecciona la columna o categoria que se quiere remplazar
variable = 'Rating'

#Se arma un vector con los datos sin tener datos repetidos
categorias = df[variable].unique()

#Se crea un df con los datos que son candidatos a variable categorica
dfCategorias = pd.DataFrame({'categoria' : categorias})

dfCategorias

#Se crea un archivo para poder hacer los cambios que se quieran realizar
dfCategorias.to_csv('/content/drive/MyDrive/nuevaCategoria.csv', index=False)

#Se debe ir al archivo y realizar los cambios que se quieran

#Se vuelve a cargar el archivo ya con los cambios realizados
nuevaCategorias = pd.read_csv('/content/drive/MyDrive/nuevaCategoria - nuevaCategoria.csv')

nuevaCategorias

#Se crea un diccionario que asocie las categorias antiguas con los nuevos valores
columNueva = dict(zip(nuevaCategorias['categoria'], nuevaCategorias['cambioCategoria']))

#Se remplazan los datos con ayuda del diccionario
df[variable] = df[variable].replace(columNueva)

df

"""# 7. Cambiar nombre de las columnas"""

#Replazar '_' por ' ' para limpiar el nombre en esta data
for col in df.columns:
  df = df.rename(columns={col : col.replace('_', ' ')})

df.head()

#Convertimos los titulos de cada columna en un nuevo df
cambioNombre = df.columns.to_frame()

#Escribimos un archivo con este df para hacer la traduccion y volver a subir el archivo
cambioNombre.to_csv('/content/drive/MyDrive/nuevoNombre.csv', index=False)

#Cargar el archivo con las modificaciones que se realizaron
dfNombres = pd.read_csv('/content/drive/MyDrive/nuevoNombre.csv','nuevoNombre - nuevoNombre (1).csv')

dfNombres

#Se crea un diccionario que asocie los nombres antiguos con los nuevo nombres
columnas_nuevas = dict(zip(dfNombres['Antiguo'], dfNombres['Nuevo']))
df = df.rename(columns = columnas_nuevas)

df